{"version":3,"sources":["redux/mainApp.js","App.jsx","serviceWorker.js","redux/redux.js","index.js"],"names":["CLEAR","DELETE_SYMBOL","PROC","SIGN","NUMBER","EQUALS","initialState","calcValue","isProcInvalue","resultValues","mainReducer","state","action","type","slice","trim","checkEndValue","Number","length","alert","value","copyValue","replace","endValue","eval","resultValue","id","Date","now","date","toLocaleString","calculateValue","mapDispatchToProps","App","connect","mainApp","useState","setValue","resultValuesState","setResultValuesState","useEffect","saved","JSON","parse","localStorage","getItem","prev","setItem","stringify","className","readOnly","onClick","map","item","key","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a85834a8.chunk.js","sourcesContent":["\r\nconst CLEAR = 'clear';\r\nconst DELETE_SYMBOL = 'deleteSymbol';\r\nconst PROC = 'proc';\r\nconst SIGN = 'sign';\r\nconst NUMBER = 'number';\r\nconst EQUALS = 'equals';\r\n\r\nlet initialState = {\r\n  calcValue: '',\r\n  isProcInvalue: false,\r\n  resultValues: []\r\n}\r\n\r\nexport const mainReducer = (state = initialState, action) => {\r\n switch(action.type) {\r\n \tcase CLEAR: {\r\n\t  return {\r\n      ...state,\r\n      calcValue: '',\r\n      isProcInvalue: false\r\n\t  };\r\n   }\r\n   case DELETE_SYMBOL: {\r\n\t  return {\r\n      ...state,\r\n      calcValue: state.calcValue.slice(0, -1).trim(),\r\n      isProcInvalue: false\r\n\t  };\r\n   }\r\n   case PROC: {\r\n    let checkEndValue = Number(+state.calcValue.slice(-1));\r\n    if (state.calcValue.slice(-1) === '0') checkEndValue = true;\r\n\r\n    if (checkEndValue && (state.calcValue.length > 0)) {\r\n      return {\r\n        ...state,\r\n        calcValue: state.calcValue + '%',\r\n        isProcInvalue: true\r\n      }\r\n    }\telse {\r\n      alert('You entered an incorrect expression!');\r\n      return state;\r\n    }  \r\n   }\r\n   case SIGN: {\r\n    let checkEndValue = Number(+state.calcValue.slice(-1));\r\n    if (state.calcValue.slice(-1) === '0') checkEndValue = true;\r\n\r\n    if ((checkEndValue && (state.calcValue.length > 0)) || state.isProcInvalue) {\r\n      return {\r\n        ...state,\r\n        calcValue: `${state.calcValue + action.value}`,\r\n        isProcInvalue: false\r\n      }\r\n    }\telse {\r\n      alert('You entered an incorrect expression!');\r\n      return state;\r\n    } \r\n   }\r\n   case NUMBER: {\r\n    if (!state.isProcInvalue) {\r\n      return {\r\n        ...state,\r\n        calcValue: state.calcValue + action.value\r\n      };\r\n    }\telse {\r\n      alert('You entered an incorrect expression!');\r\n      return state;\r\n    }\t  \r\n   }\r\n   case EQUALS: {\r\n    let copyValue = state.calcValue.replace(/%/g, ' / 100');\r\n    let checkEndValue = Number(+state.calcValue.slice(-1));\r\n    if (state.calcValue.slice(-1) === '0') checkEndValue = true;\r\n\r\n    if (checkEndValue || state.isProcInvalue) { \r\n      // eslint-disable-next-line\r\n      let endValue = eval(copyValue);\r\n\r\n      let resultValue = {\r\n        id: Date.now(),\r\n        date: new Date(2014, 11, 31, 12, 30, 0).toLocaleString(),\r\n        value: `${state.calcValue} = ${endValue || ''}`\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        calcValue: '',\r\n        isProcInvalue: false,\r\n        resultValues: [resultValue]\r\n      };\r\n    }\telse {\r\n      alert('You entered an incorrect expression!');\r\n      return state;\r\n    }    \r\n   }\r\n\t default: \r\n\t  return state;\r\n }\r\n}\r\n\r\n\r\nexport const calculateValue = (type, value) => ({\r\n type, value\r\n});\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {calculateValue} from './redux/mainApp';\nimport {connect} from 'react-redux';\n\n\nconst AppContainer = ({calcValue, calculateValue, resultValues}) => {\n  const [value, setValue] = useState(calcValue);\n  const [resultValuesState, setResultValuesState] = useState(resultValues);\n\n  useEffect(() => {\n    setValue(calcValue)\n  }, [calcValue]);\n\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem('resultValuesState') || '[]')\n    setResultValuesState(saved)\n  }, []);\n\n  useEffect(() => {\n    setResultValuesState((prev => [...resultValues, ...prev]))\n  }, [resultValues]);\n\n  useEffect(() => {\n    localStorage.setItem('resultValuesState', JSON.stringify(resultValuesState))\n  }, [resultValuesState]);\n\n\n\n  // const [todos, setTodos] = useState<ITodo[]>([])\n  \n  // useEffect(() => { // забираем элементы\n  //  const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[]\n  //  setTodos(saved)\n  // }, [])\n\n  // useEffect(() => {\n  //   localStorage.setItem('todos', JSON.stringify(todos))\n  // }, [todos])\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"calcWrap\">\n\n        <div className=\"calc grey darken-1\">\n          <input readOnly type=\"text\" className=\"grid-item value\" value={value ? value : 0}/>\n          <div onClick={() => calculateValue('clear')} className=\"grid-item clear\">AC</div>\n          <div onClick={() => calculateValue('deleteSymbol')} className=\"grid-item deleteSymbol\">&#8617;</div>\n          <div onClick={() => calculateValue('proc')} className=\"grid-item proc\">%</div>\n          <div onClick={() => calculateValue('sign', \" / \")} className=\"grid-item grid-computation share\">&divide;</div>\n          <div onClick={() => calculateValue('number', '7')} className=\"grid-item seven\">7</div>\n          <div onClick={() => calculateValue('number', '8')} className=\"grid-item eight\">8</div>\n          <div onClick={() => calculateValue('number', '9')} className=\"grid-item nine\">9</div>\n          <div onClick={() => calculateValue('sign', ' * ')} className=\"grid-item grid-computation multiply\">&times;</div>\n          <div onClick={() => calculateValue('number', '4')} className=\"grid-item four\">4</div>\n          <div onClick={() => calculateValue('number', '5')} className=\"grid-item five\">5</div>\n          <div onClick={() => calculateValue('number', '6')} className=\"grid-item six\">6</div>\n          <div onClick={() => calculateValue('sign', ' - ')} className=\"grid-item grid-computation subtract\">&ndash;</div>\n          <div onClick={() => calculateValue('number', '1')} className=\"grid-item one\">1</div>\n          <div onClick={() => calculateValue('number', '2')} className=\"grid-item two\">2</div>\n          <div onClick={() => calculateValue('number', '3')} className=\"grid-item three\">3</div>\n          <div onClick={() => calculateValue('sign', ' + ')} className=\"grid-item grid-computation plus\">+</div>\n          <div onClick={() => calculateValue('number', '0')} className=\"grid-item ziro\">0</div>\n          <div onClick={() => calculateValue('sign', '.')} className=\"grid-item comma\">.</div>\n          <div onClick={() => calculateValue('equals')} className=\"grid-item grid-computation equals\">=</div>\n        </div>\n\n        <div className=\"info\">\n          {/* <div className=\"info\"> */}\n            <div className=\"infoTitle\">Operations history:</div> \n\n            {resultValuesState.map(item => (\n              <div className=\"infoBlock\" key={item.id}>\n                <span className=\"infoData\">\n                  {item.date}\n                </span>\n                <span className=\"infoValue\">\n                  {item.value}\n                </span>\n              </div>\n            ))}\n\n          {/* </div> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    calcValue: state.mainApp.calcValue,\n    resultValues: state.mainApp.resultValues\n  }\n}\nlet mapDispatchToProps = {\n  calculateValue\n}\n\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(AppContainer)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers,\r\n  applyMiddleware} from 'redux';\r\n import {mainReducer} from './mainApp';\r\n import thunkMiddleware from 'redux-thunk';\r\n \r\n \r\nlet rootReducer = combineReducers({\r\n  mainApp: mainReducer\r\n});\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './redux/redux';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>    \n  </HashRouter>      \n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}